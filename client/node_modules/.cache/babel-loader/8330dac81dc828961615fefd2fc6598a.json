{"ast":null,"code":"import _slicedToArray from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/src/components/Timer/Timer.js\";\nimport PropTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport Controls from './Controls';\nimport TimerDisplay from './TimerDisplay';\nimport IncrementDecrementButton from '../shared/IncrementDecrementButton';\n\nvar Timer = function Timer() {\n  var DefaultSeconds = 180;\n\n  var twoDigits = function twoDigits(time) {\n    return time >= 10 ? time : \"0\".concat(time);\n  };\n\n  var countdownView = function countdownView(seconds) {\n    var minutes = Math.floor(seconds / 60);\n    var secondsLeft = seconds % 60;\n    return \"0\".concat(minutes || '00', \":\").concat(twoDigits(secondsLeft) || '00');\n  };\n\n  var _useState = useState(DefaultSeconds),\n      _useState2 = _slicedToArray(_useState, 2),\n      seconds = _useState2[0],\n      setSeconds = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      timerOn = _useState4[0],\n      setTimerOn = _useState4[1]; // useEffect(() => {\n  //   const seconds = parseFloat(localStorage.getItem('seconds'))\n  //       || DefaultSeconds;\n  //   setSeconds(seconds);\n  // }, []);\n  //timer play pause functionality works until reset timer button is clicked,\n  //reset timer updates state but then state is update from somewhere else...\n\n\n  useEffect(function () {\n    var tick = null;\n\n    if (timerOn && seconds > 0) {\n      var endTime = new Date().getTime() + (seconds * 1000 + 500);\n\n      var updateClock = function updateClock() {\n        var msLeft = endTime - new Date().getTime();\n        console.log(\"msLeft:\", msLeft);\n\n        if (msLeft >= 0) {\n          var currentTime = new Date(msLeft);\n          console.log(\"currentTime:\", currentTime.getUTCSeconds());\n          setSeconds(currentTime.getUTCSeconds()); //do setSeconds in setTimeout?\n\n          tick = setTimeout(updateClock, currentTime.getUTCMilliseconds() + 500);\n        }\n      };\n\n      updateClock();\n    } else if (!timerOn) {\n      //click is always null at this point\n      //interval is never being cleared\n      console.log(\"tick:\", tick);\n      clearInterval(tick);\n    }\n\n    return function () {\n      return clearInterval(tick);\n    };\n  }, [timerOn, seconds]);\n\n  var stepUpTime = function stepUpTime() {\n    var currentSeconds = seconds;\n\n    if (currentSeconds < 420) {\n      var newSeconds = currentSeconds + 1;\n      setSeconds(newSeconds);\n    }\n  };\n\n  var stepDownTime = function stepDownTime() {\n    var currentSeconds = seconds;\n\n    if (seconds > 0) {\n      var newSeconds = currentSeconds - 1;\n      setSeconds(newSeconds);\n    }\n  };\n\n  var resetTimer = function resetTimer() {\n    setSeconds(DefaultSeconds);\n    setTimerOn(false);\n  };\n\n  var playPause = function playPause() {\n    setTimerOn(!timerOn);\n  };\n\n  return React.createElement(\"div\", {\n    id: \"countdown-timer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"increment timer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(IncrementDecrementButton, {\n    id: \"timer\",\n    onClick: stepUpTime,\n    text: \"+\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), React.createElement(IncrementDecrementButton, {\n    id: \"timer\",\n    onClick: stepDownTime,\n    text: \"-\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  })), React.createElement(TimerDisplay, {\n    time: countdownView(seconds),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), React.createElement(Controls, {\n    playPauseClick: playPause,\n    resetClick: resetTimer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }));\n};\n\nTimer.propTypes = {\n  stepUpTime: PropTypes.func,\n  stepDownTime: PropTypes.func,\n  countdownView: PropTypes.string,\n  playPause: PropTypes.func,\n  resetTimer: PropTypes.func\n};\nexport default Timer;","map":{"version":3,"sources":["/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/src/components/Timer/Timer.js"],"names":["PropTypes","React","useState","useEffect","Controls","TimerDisplay","IncrementDecrementButton","Timer","DefaultSeconds","twoDigits","time","countdownView","seconds","minutes","Math","floor","secondsLeft","setSeconds","timerOn","setTimerOn","tick","endTime","Date","getTime","updateClock","msLeft","console","log","currentTime","getUTCSeconds","setTimeout","getUTCMilliseconds","clearInterval","stepUpTime","currentSeconds","newSeconds","stepDownTime","resetTimer","playPause","propTypes","func","string"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\n\nimport Controls from './Controls';\nimport TimerDisplay from './TimerDisplay';\nimport IncrementDecrementButton from '../shared/IncrementDecrementButton';\n\nconst Timer = () => {\n  const DefaultSeconds = 180;\n  let twoDigits = time => (time >= 10 ? time : `0${time}`);\n\n  const countdownView = (seconds) => {\n    let minutes = Math.floor(seconds/60);\n    let secondsLeft = seconds % 60;\n\n    return `0${minutes || '00'}:${twoDigits(secondsLeft) || '00'}`; \n  } \n  \n\n  const [seconds, setSeconds] = useState(DefaultSeconds);\n  const [timerOn, setTimerOn] = useState(false);\n  \n  // useEffect(() => {\n  //   const seconds = parseFloat(localStorage.getItem('seconds'))\n  //       || DefaultSeconds;\n\n  //   setSeconds(seconds);\n  // }, []);\n\n  //timer play pause functionality works until reset timer button is clicked,\n    //reset timer updates state but then state is update from somewhere else...\n  useEffect(() => {\n    var tick = null;\n    \n    if (timerOn && seconds > 0) {\n      let endTime = new Date().getTime() + ((seconds * 1000) + 500);\n\n      const updateClock = () => {\n        let msLeft = endTime - new Date().getTime();\n        console.log(\"msLeft:\", msLeft);\n        if (msLeft >= 0) {\n          let currentTime = new Date(msLeft);\n          console.log(\"currentTime:\", currentTime.getUTCSeconds());\n          setSeconds(currentTime.getUTCSeconds());//do setSeconds in setTimeout?\n          \n          tick = setTimeout(\n            updateClock,\n            currentTime.getUTCMilliseconds() + 500\n          );\n        }\n      }\n      updateClock()\n    } else if (!timerOn) {\n      //click is always null at this point\n        //interval is never being cleared\n        console.log(\"tick:\", tick);\n      clearInterval(tick);\n    }\n    return () => clearInterval(tick);\n  }, [timerOn, seconds]);\n\n  const stepUpTime = () => {\n    const currentSeconds = seconds;\n\n    if (currentSeconds < 420) {\n      let newSeconds = currentSeconds + 1;\n      setSeconds(newSeconds);\n    }\n  }\n\n  const stepDownTime = () => {\n    const currentSeconds = seconds;\n\n    if (seconds > 0) {\n      let newSeconds = currentSeconds - 1;\n      setSeconds(newSeconds);\n    }\n  };\n\n  const resetTimer = () => {\n    setSeconds(DefaultSeconds);\n    setTimerOn(false);\n  }\n\n  const playPause = () => {\n    setTimerOn(!timerOn);\n  }\n\n  return (\n    <div id=\"countdown-timer\">\n      <div className=\"increment timer\">\n        <IncrementDecrementButton \n          id=\"timer\"\n          onClick={stepUpTime}\n          text=\"+\"\n        />\n        <IncrementDecrementButton \n          id=\"timer\"\n          onClick={stepDownTime}\n          text=\"-\"\n        />\n      </div>\n      <TimerDisplay time={countdownView(seconds)} />\n      <Controls\n        playPauseClick={playPause}\n        resetClick={resetTimer}\n      />\n    </div>\n  );\n};\n\nTimer.propTypes = {\n    stepUpTime: PropTypes.func,\n    stepDownTime: PropTypes.func,\n    countdownView: PropTypes.string,\n    playPause: PropTypes.func,\n    resetTimer: PropTypes.func\n};\n\nexport default Timer;"]},"metadata":{},"sourceType":"module"}