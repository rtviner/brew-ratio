{"ast":null,"code":"import _classCallCheck from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nvar DefaultCups = 2;\nvar DefaultRatio = 15.5; // input grams of water per 1 cup and desired cups (user input number) and output will be the number of grams of water required to make those desired cups\n// const WaterGrams = (cupSizeML = 280, desiredCups) => cupSizeML * desiredCups;\n//input waterGrams needed for desiredCups of coffee and goldenRatio (grams of water per 1 gram coffee) and outputs coffee grams required to make desired cups.\n// const CoffeeGrams = (waterGrams, goldenRatio = 15) => waterGrams / goldenRatio;\n//input coffeeGrams available (user input number) and goldenRatio and outPuts number of cups possible\n// const DesiredCups = (coffeeGrams, goldenRatio = 15) => coffeeGrams / goldenRatio;\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      cups: DefaultCups,\n      goldenRatio: DefaultRatio,\n      ingredients: '',\n      error: null\n    };\n    _this.onSubmitChange = _this.onSubmitChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onCupsSubmit = _this.onCupsSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"onSubmitChange\",\n    value: function onSubmitChange(event) {\n      //make sure input is a number here or post an error message\n      isNaN(event.target.value) ? this.setState({\n        cups: 0\n      }) : this.setState({\n        cups: event.target.value\n      });\n    }\n  }, {\n    key: \"onCupsSubmit\",\n    value: function onCupsSubmit(event) {\n      var cups = this.state.cups;\n      var goldenRatio = this.state.goldenRatio;\n      this.setIngredients(cups, goldenRatio);\n      event.preventDefault();\n    }\n  }, {\n    key: \"setIngredients\",\n    value: function setIngredients(cups, goldenRatio) {\n      var cupSize = 280;\n      var waterGrams = Math.round(cupSize * cups); // const coffeeGrams = (waterGrams, goldenRatio = 15) => waterGrams / goldenRatio;\n\n      var coffeeGrams = Math.round(waterGrams / goldenRatio);\n      this.setState({\n        ingredients: {\n          coffee: coffeeGrams,\n          water: waterGrams\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          cups = _this$state.cups,\n          ingredients = _this$state.ingredients;\n      var coffee = ingredients.coffee;\n      var water = ingredients.water;\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Brew Ratio\")), React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"interactions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"How much brewed coffee would you like?\"), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Desired 10oz Cups:\", React.createElement(CupGrindInput, {\n        value: cups,\n        onChange: this.onSubmitChange,\n        onSubmit: this.onCupsSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }))), React.createElement(Ingredients, {\n        coffee: coffee,\n        water: water,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"interactions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Coffee beans running low?\"), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"How much beans do you have(g ground)?\", React.createElement(CupGrindInput, {\n        value: ingredients.coffee,\n        onChange: this.onSubmitChange,\n        onSubmit: this.onCupsSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar CupGrindInput = function CupGrindInput(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      onSubmit = _ref.onSubmit;\n  return React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"number\",\n    step: \".01\",\n    value: value,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"Submit\"));\n};\n\nvar Ingredients = function Ingredients(_ref2) {\n  var coffee = _ref2.coffee,\n      water = _ref2.water;\n  return React.createElement(\"div\", {\n    className: \"ingredients\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"coffee\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, coffee, \"g coffee (ground)\"), React.createElement(\"div\", {\n    className: \"water\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, water, \"g water\"));\n}; // const RadioInput = ({ value, onChange, onSubmit}) =>\n//   <form>\n//     <label> \n//       How much ground beans do you have? (g)\n//     </label>\n//   </form>\n\n\nexport default App;","map":{"version":3,"sources":["/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/src/App.js"],"names":["React","Component","DefaultCups","DefaultRatio","App","props","state","cups","goldenRatio","ingredients","error","onSubmitChange","bind","onCupsSubmit","event","isNaN","target","value","setState","setIngredients","preventDefault","cupSize","waterGrams","Math","round","coffeeGrams","coffee","water","CupGrindInput","onChange","onSubmit","Ingredients"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst DefaultCups = 2;\nconst DefaultRatio = 15.5;\n\n// input grams of water per 1 cup and desired cups (user input number) and output will be the number of grams of water required to make those desired cups\n// const WaterGrams = (cupSizeML = 280, desiredCups) => cupSizeML * desiredCups;\n//input waterGrams needed for desiredCups of coffee and goldenRatio (grams of water per 1 gram coffee) and outputs coffee grams required to make desired cups.\n// const CoffeeGrams = (waterGrams, goldenRatio = 15) => waterGrams / goldenRatio;\n//input coffeeGrams available (user input number) and goldenRatio and outPuts number of cups possible\n// const DesiredCups = (coffeeGrams, goldenRatio = 15) => coffeeGrams / goldenRatio;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cups: DefaultCups,\n      goldenRatio: DefaultRatio,\n      ingredients: '',\n      error: null,\n    };\n\n    this.onSubmitChange = this.onSubmitChange.bind(this);\n    this.onCupsSubmit = this.onCupsSubmit.bind(this);\n  }\n\n  onSubmitChange(event) {\n    //make sure input is a number here or post an error message\n    (isNaN(event.target.value)) ? this.setState({ cups: 0}): this.setState({ cups: event.target.value });\n  }\n\n  onCupsSubmit(event) {\n    const { cups } = this.state;\n    const { goldenRatio } = this.state;\n    this.setIngredients(cups, goldenRatio); \n    event.preventDefault();\n  }\n\n  setIngredients(cups, goldenRatio) {\n    const cupSize = 280;\n    const waterGrams = Math.round(cupSize * cups);\n    // const coffeeGrams = (waterGrams, goldenRatio = 15) => waterGrams / goldenRatio;\n    const coffeeGrams = Math.round(waterGrams / goldenRatio);\n\n    this.setState({\n      ingredients: {\n        coffee: coffeeGrams,\n        water: waterGrams\n      }\n    });\n  }\n\n  render() {\n    const { cups, ingredients} = this.state;\n    const coffee = (ingredients.coffee);\n    const water = (ingredients.water);\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Brew Ratio</h1>\n        </header>\n        <main>\n          <div className=\"interactions\">\n          <h2>How much brewed coffee would you like?</h2>\n            <label>Desired 10oz Cups:\n              <CupGrindInput \n                value={cups}\n                onChange={this.onSubmitChange}\n                onSubmit = {this.onCupsSubmit}\n              >\n              </CupGrindInput>\n            </label>   \n          </div>\n          <Ingredients\n            coffee={coffee}\n            water={water}\n          >\n          </Ingredients>\n          <div className=\"interactions\">\n            <h2>Coffee beans running low?</h2>\n       \n                      \n            <label>How much beans do you have(g ground)?\n              <CupGrindInput \n                value={ingredients.coffee}\n                onChange={this.onSubmitChange}\n                onSubmit = {this.onCupsSubmit}\n              >\n              </CupGrindInput>\n            </label>\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nconst CupGrindInput = ({value, onChange, onSubmit}) =>\n        <form onSubmit = {onSubmit}>\n            <input\n              type=\"number\"\n              step=\".01\"\n              value={value}\n              onChange={onChange}\n            />\n          <button type=\"submit\" >\n            Submit\n          </button>\n        </form>\n\nconst Ingredients = ({ coffee, water }) =>\n  <div className=\"ingredients\">\n    <div className=\"coffee\">\n      {coffee}g coffee (ground)\n    </div>\n    <div className=\"water\"> \n      {water}g water\n    </div>\n  </div>\n\n// const RadioInput = ({ value, onChange, onSubmit}) =>\n//   <form>\n//     <label> \n//       How much ground beans do you have? (g)\n\n//     </label>\n//   </form>\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}