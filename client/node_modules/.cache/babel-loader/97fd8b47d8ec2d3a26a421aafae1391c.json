{"ast":null,"code":"import _slicedToArray from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/src/components/Timer/Timer.js\";\n\nimport PropTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport Controls from './Controls';\nimport TimerDisplay from './TimerDisplay';\nimport IncrementDecrementButton from '../shared/IncrementDecrementButton';\nvar DefaultMinutes = 3;\nvar DefaultSeconds = 0;\n\nvar twoDigits = function twoDigits(time) {\n  return time >= 10 ? time : \"0\".concat(time);\n};\n\nvar countdownView = function countdownView(minutes, seconds) {\n  return \"\".concat(twoDigits(minutes) || '00', \":\").concat(twoDigits(seconds) || '00');\n};\n\nvar Timer = function Timer() {\n  var _useState = useState(DefaultMinutes),\n      _useState2 = _slicedToArray(_useState, 2),\n      minutes = _useState2[0],\n      setMinutes = _useState2[1];\n\n  var _useState3 = useState(DefaultSeconds),\n      _useState4 = _slicedToArray(_useState3, 2),\n      seconds = _useState4[0],\n      setSeconds = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      timerOn = _useState6[0],\n      setTimerOn = _useState6[1];\n\n  useEffect(function () {\n    var minutes = parseFloat(localStorage.getItem('minutes')) || DefaultMinutes;\n    var seconds = parseFloat(localStorage.getItem('seconds')) || DefaultSeconds;\n    setMinutes(minutes);\n    setSeconds(seconds);\n  });\n\n  var resetTimer = function resetTimer() {\n    stopTimer();\n    setMinutes(DefaultMinutes);\n    setSeconds(DefaultSeconds);\n  };\n\n  var playPause = function playPause() {\n    if (timerOn) stopTimer();else countdown();\n  };\n\n  var stopTimer = function stopTimer() {\n    setTimerOn(false);\n    clearTimeout(_this.tick);\n  };\n\n  var countdown = function countdown() {\n    var intervalTime = minutes * 60 + seconds;\n    var endTime = new Date().getTime() + intervalTime * 1000 + 500;\n    setTimerOn(true);\n\n    var updateClock = function updateClock() {\n      var msLeft = endTime - new Date().getTime(); // if (msLeft <= 0) {\n      //     // make a ding noise\n      // }\n\n      if (msLeft >= 0) {\n        var currentTime = new Date(msLeft); // intervalTime = Math.floor(msLeft / 1000),\n\n        setMinutes(currentTime.getUTCMinutes());\n        setSeconds(currentTime.getUTCSeconds());\n        _this.tick = setTimeout(updateClock, currentTime.getUTCMilliseconds() + 500);\n      }\n    };\n\n    updateClock();\n  };\n\n  var stepUpTime = function stepUpTime() {\n    var _this$state = _this.state,\n        minutes = _this$state.minutes,\n        seconds = _this$state.seconds;\n    var currentMinutes = minutes;\n    var currentSeconds = seconds;\n    var newMinutes;\n    var newSeconds;\n\n    if (seconds === 59) {\n      newMinutes = currentMinutes + 1;\n      newSeconds = 0;\n      setMinutes(newMinutes);\n      setSeconds(newSeconds);\n    } else if (minutes < 5) {\n      newSeconds = currentSeconds + 1;\n      setSeconds(newSeconds);\n    }\n  };\n\n  var stepDownTime = function stepDownTime() {\n    var _this$state2 = _this.state,\n        minutes = _this$state2.minutes,\n        seconds = _this$state2.seconds;\n    var currentMinutes = minutes;\n    var currentSeconds = seconds;\n    var newMinutes;\n    var newSeconds;\n\n    if (seconds === 0 && minutes > 2) {\n      newMinutes = currentMinutes - 1;\n      newSeconds = 59;\n      setMinutes(newMinutes);\n      setSeconds(newSeconds);\n    }\n\n    if (seconds > 0) {\n      newSeconds = currentSeconds - 1;\n      setSeconds(newSeconds);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    id: \"countdown-timer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"increment timer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(IncrementDecrementButton, {\n    id: \"timer\",\n    onClick: stepUpTime,\n    text: \"+\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }), React.createElement(IncrementDecrementButton, {\n    id: \"timer\",\n    onClick: stepDownTime,\n    text: \"-\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  })), React.createElement(TimerDisplay, {\n    time: countdownView(minutes, seconds),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), React.createElement(Controls, {\n    playPauseClick: playPause,\n    resetClick: resetTimer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }));\n};\n\nTimer.propTypes = {\n  stepUpTime: PropTypes.func,\n  stepDownTime: PropTypes.func,\n  countdownView: PropTypes.string,\n  playPause: PropTypes.func,\n  resetTimer: PropTypes.func\n};\nexport default Timer;","map":{"version":3,"sources":["/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/src/components/Timer/Timer.js"],"names":["PropTypes","React","useState","useEffect","Controls","TimerDisplay","IncrementDecrementButton","DefaultMinutes","DefaultSeconds","twoDigits","time","countdownView","minutes","seconds","Timer","setMinutes","setSeconds","timerOn","setTimerOn","parseFloat","localStorage","getItem","resetTimer","stopTimer","playPause","countdown","clearTimeout","tick","intervalTime","endTime","Date","getTime","updateClock","msLeft","currentTime","getUTCMinutes","getUTCSeconds","setTimeout","getUTCMilliseconds","stepUpTime","state","currentMinutes","currentSeconds","newMinutes","newSeconds","stepDownTime","propTypes","func","string"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\n\nimport Controls from './Controls';\nimport TimerDisplay from './TimerDisplay';\nimport IncrementDecrementButton from '../shared/IncrementDecrementButton';\n\nconst DefaultMinutes = 3;\nconst DefaultSeconds = 0;\n\nlet twoDigits = time => (time >= 10 ? time : `0${time}`);\n\nconst countdownView = (minutes, seconds) => `${twoDigits(minutes) || '00'}:${twoDigits(seconds) || '00'}`;\n\nconst Timer = () => {\n  const [minutes, setMinutes] = useState(DefaultMinutes);\n  const [seconds, setSeconds] = useState(DefaultSeconds);\n  const [timerOn, setTimerOn] = useState(false);\n  \n  useEffect(() => {\n    const minutes = parseFloat(localStorage.getItem('minutes'))\n        || DefaultMinutes;\n    const seconds = parseFloat(localStorage.getItem('seconds'))\n        || DefaultSeconds;\n\n    setMinutes(minutes);\n    setSeconds(seconds);\n  });\n\n  const resetTimer = () => {\n    stopTimer()\n    setMinutes(DefaultMinutes);\n    setSeconds(DefaultSeconds);\n  }\n\n  const playPause = () => {\n    if (timerOn) stopTimer()\n    else countdown()\n  }\n\n  const stopTimer = () => {\n    setTimerOn(false);\n    clearTimeout(this.tick)\n  }\n\n  const countdown = () => {\n    let intervalTime = (minutes * 60)  + seconds;\n    let endTime = new Date().getTime() + intervalTime * 1000 + 500\n\n    setTimerOn(true);\n\n    const updateClock = () => {\n      let msLeft = endTime - new Date().getTime()\n      // if (msLeft <= 0) {\n      //     // make a ding noise\n      // }\n      if (msLeft >= 0) {\n        let currentTime = new Date(msLeft)\n        // intervalTime = Math.floor(msLeft / 1000),\n \n        setMinutes(currentTime.getUTCMinutes())\n        setSeconds(currentTime.getUTCSeconds())\n        \n        this.tick = setTimeout(\n          updateClock,\n          currentTime.getUTCMilliseconds() + 500\n        )\n      }\n    }\n    updateClock()\n  };\n\n  const stepUpTime = () => {\n    const { minutes, seconds } = this.state;\n    const currentMinutes = minutes;\n    const currentSeconds = seconds;\n    let newMinutes;\n    let newSeconds;\n    if (seconds === 59) {\n      newMinutes = currentMinutes + 1;\n      newSeconds = 0;\n      setMinutes(newMinutes);\n      setSeconds(newSeconds);\n    }\n    else if (minutes < 5) {\n      newSeconds = currentSeconds + 1;\n      setSeconds(newSeconds);\n    }\n  }\n\n  const stepDownTime = () => {\n    const { minutes, seconds } = this.state;\n    const currentMinutes = minutes;\n    const currentSeconds = seconds;\n    let newMinutes;\n    let newSeconds;\n    if (seconds === 0 && minutes > 2) {\n      newMinutes = currentMinutes - 1;\n      newSeconds = 59;\n      setMinutes(newMinutes);\n      setSeconds(newSeconds);\n    }\n    if (seconds > 0) {\n      newSeconds = currentSeconds - 1;\n      setSeconds(newSeconds);\n    }\n  };\n\n  return (\n    <div id=\"countdown-timer\">\n      <div className=\"increment timer\">\n        <IncrementDecrementButton \n          id=\"timer\"\n          onClick={stepUpTime}\n          text=\"+\"\n        />\n        <IncrementDecrementButton \n          id=\"timer\"\n          onClick={stepDownTime}\n          text=\"-\"\n        />\n      </div>\n      <TimerDisplay time={countdownView(minutes, seconds)} />\n      <Controls\n        playPauseClick={playPause}\n        resetClick={resetTimer}\n      />\n    </div>\n  );\n};\n\nTimer.propTypes = {\n    stepUpTime: PropTypes.func,\n    stepDownTime: PropTypes.func,\n    countdownView: PropTypes.string,\n    playPause: PropTypes.func,\n    resetTimer: PropTypes.func\n};\n\nexport default Timer;"]},"metadata":{},"sourceType":"module"}