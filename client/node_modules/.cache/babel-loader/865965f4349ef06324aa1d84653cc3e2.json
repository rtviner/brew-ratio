{"ast":null,"code":"import _classCallCheck from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nvar DefaultCups = 2;\nvar DefaultRatio = 15.5;\nvar CoffeeGrindsLabel = \"g coffee (ground)\";\nvar CupsLabel = \"10oz cups\"; // input grams of water per 1 cup and desired cups (user input number) and output will be the number of grams of water required to make those desired cups\n// const WaterGrams = (cupSizeML = 280, desiredCups) => cupSizeML * desiredCups;\n//input waterGrams needed for desiredCups of coffee and goldenRatio (grams of water per 1 gram coffee) and outputs coffee grams required to make desired cups.\n// const CoffeeGrams = (waterGrams, goldenRatio = 15) => waterGrams / goldenRatio;\n//input coffeeGrams available (user input number) and goldenRatio and outPuts number of cups possible\n// const DesiredCups = (coffeeGrams, goldenRatio = 15) => coffeeGrams / goldenRatio;\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      cups: DefaultCups,\n      goldenRatio: DefaultRatio,\n      ingredients: '',\n      error: null,\n      yesButton: false\n    };\n    _this.onSubmitChange = _this.onSubmitChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onCupsSubmit = _this.onCupsSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onButtonChange = _this.onButtonChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"onButtonChange\",\n    value: function onButtonChange(event) {\n      this.setState({\n        yesButton: !this.state.yesButton\n      });\n    }\n  }, {\n    key: \"onSubmitChange\",\n    value: function onSubmitChange(event) {\n      //make sure input is a number here or post an error message\n      isNaN(event.target.value) ? this.setState({\n        cups: 0\n      }) : this.setState({\n        cups: event.target.value\n      });\n    }\n  }, {\n    key: \"onCupsSubmit\",\n    value: function onCupsSubmit(event) {\n      var cups = this.state.cups;\n      var goldenRatio = this.state.goldenRatio;\n      this.setIngredients(cups, goldenRatio);\n      event.preventDefault();\n    }\n  }, {\n    key: \"setIngredients\",\n    value: function setIngredients(cups, goldenRatio) {\n      var cupSize = 280;\n      var waterGrams = Math.round(cupSize * cups); // const coffeeGrams = (waterGrams, goldenRatio = 15) => waterGrams / goldenRatio;\n\n      var coffeeGrams = Math.round(waterGrams / goldenRatio);\n      this.setState({\n        ingredients: {\n          coffee: coffeeGrams,\n          water: waterGrams\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          cups = _this$state.cups,\n          ingredients = _this$state.ingredients,\n          yesButton = _this$state.yesButton;\n      var coffee = ingredients.coffee;\n      var water = ingredients.water;\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Brew Ratio\")), React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"interactions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Coffee beans running low?\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Check \\\"yes\\\" below if you have a random amount of ground coffee left to brew.\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Check \\\"no\\\" if you prefer to brew a specific number of cups.\"), React.createElement(RadioInput, {\n        value: \"yes\",\n        onChange: this.onButtonChange,\n        checked: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), React.createElement(RadioInput, {\n        value: \"no\",\n        onChange: this.onButtonChange,\n        checked: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      })), yesButton ? React.createElement(\"div\", {\n        className: \"grindsInput\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"interactions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"How much ground beans do you have (g)?\", React.createElement(CupGrindInput, {\n        value: ingredients.coffee,\n        onChange: this.onSubmitChange,\n        onSubmit: this.onCupsSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }))), React.createElement(Ingredients, {\n        coffee: cups,\n        water: water,\n        label: CupsLabel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      })) : React.createElement(\"div\", {\n        className: \"cupsInput\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"interactions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Desired \", CupsLabel, \":\", React.createElement(CupGrindInput, {\n        value: cups,\n        onChange: this.onSubmitChange,\n        onSubmit: this.onCupsSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }))), React.createElement(Ingredients, {\n        coffee: coffee,\n        water: water,\n        label: CoffeeGrindsLabel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar CupGrindInput = function CupGrindInput(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      onSubmit = _ref.onSubmit;\n  return React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"number\",\n    step: \".01\",\n    value: value,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Submit\"));\n};\n\nvar Ingredients = function Ingredients(_ref2) {\n  var coffee = _ref2.coffee,\n      water = _ref2.water,\n      label = _ref2.label;\n  return React.createElement(\"div\", {\n    className: \"ingredients\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"coffeeOrCups\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, coffee, \" \", label), React.createElement(\"div\", {\n    className: \"water\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, water, \"g water\"));\n};\n\nvar RadioInput = function RadioInput(_ref3) {\n  var value = _ref3.value,\n      onChange = _ref3.onChange,\n      checked = _ref3.checked;\n  return React.createElement(\"span\", {\n    className: \"radioButton\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"radio\",\n    id: value,\n    name: \"coffeeLowQuestion\",\n    value: value,\n    onChange: onChange,\n    checked: checked,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    for: value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, value));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/src/App.js"],"names":["React","Component","DefaultCups","DefaultRatio","CoffeeGrindsLabel","CupsLabel","App","props","state","cups","goldenRatio","ingredients","error","yesButton","onSubmitChange","bind","onCupsSubmit","onButtonChange","event","setState","isNaN","target","value","setIngredients","preventDefault","cupSize","waterGrams","Math","round","coffeeGrams","coffee","water","CupGrindInput","onChange","onSubmit","Ingredients","label","RadioInput","checked"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst DefaultCups = 2;\nconst DefaultRatio = 15.5;\nconst CoffeeGrindsLabel = \"g coffee (ground)\";\nconst CupsLabel = \"10oz cups\"\n\n// input grams of water per 1 cup and desired cups (user input number) and output will be the number of grams of water required to make those desired cups\n// const WaterGrams = (cupSizeML = 280, desiredCups) => cupSizeML * desiredCups;\n//input waterGrams needed for desiredCups of coffee and goldenRatio (grams of water per 1 gram coffee) and outputs coffee grams required to make desired cups.\n// const CoffeeGrams = (waterGrams, goldenRatio = 15) => waterGrams / goldenRatio;\n//input coffeeGrams available (user input number) and goldenRatio and outPuts number of cups possible\n// const DesiredCups = (coffeeGrams, goldenRatio = 15) => coffeeGrams / goldenRatio;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cups: DefaultCups,\n      goldenRatio: DefaultRatio,\n      ingredients: '',\n      error: null,\n      yesButton: false,\n    };\n\n    this.onSubmitChange = this.onSubmitChange.bind(this);\n    this.onCupsSubmit = this.onCupsSubmit.bind(this);\n    this.onButtonChange = this.onButtonChange.bind(this);\n  }\n\n  onButtonChange(event) {\n    this.setState({ yesButton: !this.state.yesButton })\n  }\n\n  onSubmitChange(event) {\n    //make sure input is a number here or post an error message\n    (isNaN(event.target.value)) ? this.setState({ cups: 0}): this.setState({ cups: event.target.value });\n  }\n\n  onCupsSubmit(event) {\n    const { cups } = this.state;\n    const { goldenRatio } = this.state;\n    this.setIngredients(cups, goldenRatio); \n    event.preventDefault();\n  }\n\n  setIngredients(cups, goldenRatio) {\n    const cupSize = 280;\n    const waterGrams = Math.round(cupSize * cups);\n    // const coffeeGrams = (waterGrams, goldenRatio = 15) => waterGrams / goldenRatio;\n    const coffeeGrams = Math.round(waterGrams / goldenRatio);\n\n    this.setState({\n      ingredients: {\n        coffee: coffeeGrams,\n        water: waterGrams\n      }\n    });\n  }\n\n  render() {\n    const { cups, ingredients, yesButton } = this.state;\n    const coffee = (ingredients.coffee);\n    const water = (ingredients.water);\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Brew Ratio</h1>\n        </header>\n        <main>\n          <div className=\"interactions\">\n            <h2>Coffee beans running low?</h2>\n            <p>Check \"yes\" below if you have a random amount of ground coffee left to brew.</p>\n            <p>Check \"no\" if you prefer to brew a specific number of cups.</p>\n            <RadioInput \n              value=\"yes\"\n              onChange={this.onButtonChange}\n              checked={false}\n            />\n            <RadioInput \n              value=\"no\"\n              onChange={this.onButtonChange}\n              checked={true}\n            />\n          </div>\n          { yesButton\n            ? <div className=\"grindsInput\">\n                <div className=\"interactions\">\n                  <label>How much ground beans do you have (g)?\n                    <CupGrindInput \n                      value={ingredients.coffee}\n                      onChange={this.onSubmitChange}\n                      onSubmit = {this.onCupsSubmit}\n                    >\n                    </CupGrindInput>\n                  </label>\n                </div>  \n                <Ingredients\n                  coffee={cups}\n                  water={water}\n                  label={CupsLabel}\n                >\n                </Ingredients>\n              </div>  \n            : <div className=\"cupsInput\">\n                <div className=\"interactions\">\n                  <label>Desired {CupsLabel}:\n                    <CupGrindInput \n                      value={cups}\n                      onChange={this.onSubmitChange}\n                      onSubmit = {this.onCupsSubmit}\n                    >\n                    </CupGrindInput>\n                  </label>   \n                </div>\n                <Ingredients\n                  coffee={coffee}\n                  water={water}\n                  label={CoffeeGrindsLabel}\n                >\n                </Ingredients>\n              </div>\n            }  \n        </main>\n      </div>\n    );\n  }\n}\n\nconst CupGrindInput = ({value, onChange, onSubmit}) =>\n        <form onSubmit = {onSubmit}>\n            <input\n              type=\"number\"\n              step=\".01\"\n              value={value}\n              onChange={onChange}\n            />\n          <button type=\"submit\" >\n            Submit\n          </button>\n        </form>\n\nconst Ingredients = ({ coffee, water, label }) =>\n  <div className=\"ingredients\">\n    <div className=\"coffeeOrCups\">\n      {coffee} {label}\n    </div>\n    <div className=\"water\"> \n      {water}g water\n    </div>\n  </div>\n\nconst RadioInput = ({ value, onChange, checked }) =>\n  <span className=\"radioButton\">\n    <input \n      type=\"radio\"\n      id={value}\n      name=\"coffeeLowQuestion\"\n      value={value}\n      onChange={onChange}\n      checked={checked}\n    />\n    <label for={value}>{value}</label>\n  </span>\n   \n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}