{"ast":null,"code":"import _classCallCheck from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/src/App.js\";\nimport React, { Component } from 'react';\nimport { IncrementDecrementSet } from './increment.js';\nimport { InputButton } from \"./inputButton.js\";\nimport './App.css'; // const DefaultCups = 2;\n// const DefaultBrewAmt = 20;\n// const DefaultCoffee = 36;\n\nvar DefaultWater = 560;\nvar DefaultRatio = \"15.5\"; // const waterGramsPerOz = 29.574;\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      goldenRatio: DefaultRatio,\n      // cups: DefaultCups,\n      // brewAmount: DefaultBrewAmt,\n      // coffeeGrams: DefaultCoffee,\n      waterGrams: DefaultWater,\n      error: null\n    };\n    _this.updateQuantity = _this.updateQuantity.bind(_assertThisInitialized(_assertThisInitialized(_this))); // this.waterOzToGrams = this.waterOzToGrams.bind(this);\n    // this.waterGramsToOz = this.waterGramsToOz.bind(this);\n    // this.updateQuantities = this\n    //   .updateQuantities.bind(this);\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"updateAllQuantities\",\n    value: function updateAllQuantities(quantity1, quantity2) {}\n  }, {\n    key: \"updateQuantity\",\n    value: function updateQuantity(event) {\n      // const { cups } = this.state;\n      var eventInfo = event.target.id.split(\"-\");\n      var name = eventInfo[0];\n      var currentWater = this.state.waterGrams;\n      var newWater; // id for input, update this input.value onClick...\n      // `${name}-amount`\n      //cups as state should be a super precise down to the decimal\n      //only really incrementing cups with increment buttons.\n      // calculate how much cups increases base off 1ml additional water (taking into acoount goldenRatio)\n      // calculate how much cups increases based off 1g additional coffee (taking into account goldenRatio)\n\n      if (name === \"waterGrams\") {\n        newWater = eventInfo[1] === \"increment\" ? currentWater + 1 : currentWater - 1;\n      }\n\n      this.setState({\n        waterGrams: newWater\n      });\n    } //no longer a submit button\n    //   onSubmitCoffee(event) {\n    //     const { coffeeGrams, goldenRatio } = this.state;\n    //     this.setServings(coffeeGrams, parseFloat(goldenRatio));\n    //     event.preventDefault();\n    //   }\n    // //no longer a submit button\n    //   onSubmitServings(event) {\n    //     const { servings, goldenRatio } = this.state;\n    //     this.setIngredients(servings, parseFloat(goldenRatio));\n    //     event.preventDefault();\n    //   }\n    //this is not being called right now\n    // setCupss(coffeeGrams, goldenRatio, cupSize = 280) {\n    //   const possibleCups = (coffeeGrams * goldenRatio) / cupSize;\n    //   const roundedPossibleCups = Math.round(possibleCups * 4) / 4;\n    //   this.setIngredients(roundedPossibleCups, goldenRatio);\n    // }\n    //convert waterGrams to oz\n    // waterGramsToCups (waterGrams, cupSize = 280) {\n    //   const cups = Math.round(waterGrams / cupSize);\n    //   return cups;\n    // }\n    // //this is not being called right now\n    //   setIngredients(cups, goldenRatio, cupSize=280) {   \n    //     const waterGrams = Math.round(cups * cupSize);\n    //     const coffeeGrams = Math.round(waterGrams / goldenRatio);\n    //     this.setState({\n    //         cups: cups,\n    //     });\n    //   }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          waterGrams = _this$state.waterGrams,\n          goldenRatio = _this$state.goldenRatio; //convert water in oz to grams\n\n      var cupsFromWater = function cupsFromWater(water) {\n        var cupSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 280;\n        var possibleCups = water / cupSize;\n        var roundedPossibleCups = Math.round(possibleCups * 4) / 4;\n        return roundedPossibleCups;\n      }; //use the goldenRatio and water amount to calculate cofee needed in grams;\n\n\n      var coffeeGramsFromWater = function coffeeGramsFromWater(water, goldenRatio) {\n        var coffeeGrams = water / goldenRatio;\n        return Math.round(coffeeGrams);\n      };\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Brew Ratio\")), React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"adjustables\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(IncrementDecrementSet, {\n        name: \"cups\",\n        title: \"Brewed Cups\",\n        value: cupsFromWater(waterGrams),\n        measure: \"x 8oz\",\n        changeQuantity: this.updateQuantity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(IncrementDecrementSet, {\n        name: \"coffeeGrams\",\n        title: \"Ground Coffee\",\n        value: coffeeGramsFromWater(waterGrams, goldenRatio),\n        measure: \"g\",\n        changeQuantity: this.updateQuantity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), React.createElement(IncrementDecrementSet, {\n        name: \"waterGrams\",\n        title: \"Water\",\n        value: waterGrams,\n        measure: \"mL or g\",\n        changeQuantity: this.updateQuantity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"strengthInput interactions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"Coffee : Water\"), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"strength\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(InputButton, {\n        className: goldenRatio === \"18\" ? \"active\" : \"inactive\",\n        id: \"light\",\n        name: \"goldenRatio\",\n        value: \"18\",\n        onClick: this.setQuantity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        className: \"strength\",\n        htmlFor: \"light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, \"light\")), React.createElement(\"div\", {\n        className: \"strength\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(InputButton, {\n        className: goldenRatio === \"15.5\" ? \"active\" : \"inactive\",\n        id: \"med\",\n        name: \"goldenRatio\",\n        value: \"15.5\",\n        onClick: this.setQuantity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        className: \"strength\",\n        htmlFor: \"med\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, \"medium\")), React.createElement(\"div\", {\n        className: \"strength\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(InputButton, {\n        className: goldenRatio === \"13\" ? \"active\" : \"inactive\",\n        id: \"strong\",\n        name: \"goldenRatio\",\n        value: \"13\",\n        onClick: this.setQuantity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        className: \"strength\",\n        htmlFor: \"strong\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"strong\"))))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/src/App.js"],"names":["React","Component","IncrementDecrementSet","InputButton","DefaultWater","DefaultRatio","App","props","state","goldenRatio","waterGrams","error","updateQuantity","bind","quantity1","quantity2","event","eventInfo","target","id","split","name","currentWater","newWater","setState","cupsFromWater","water","cupSize","possibleCups","roundedPossibleCups","Math","round","coffeeGramsFromWater","coffeeGrams","setQuantity"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { IncrementDecrementSet } from './increment.js';\nimport { InputButton } from \"./inputButton.js\";\nimport './App.css';\n\n// const DefaultCups = 2;\n// const DefaultBrewAmt = 20;\n// const DefaultCoffee = 36;\nconst DefaultWater = 560;\nconst DefaultRatio = \"15.5\";\n// const waterGramsPerOz = 29.574;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      goldenRatio: DefaultRatio,\n      // cups: DefaultCups,\n      // brewAmount: DefaultBrewAmt,\n      // coffeeGrams: DefaultCoffee,\n      waterGrams: DefaultWater, \n      error: null,\n    };\n\n    this.updateQuantity = this\n      .updateQuantity.bind(this);\n    // this.waterOzToGrams = this.waterOzToGrams.bind(this);\n    // this.waterGramsToOz = this.waterGramsToOz.bind(this);\n    // this.updateQuantities = this\n    //   .updateQuantities.bind(this);\n\n  }\n\n  updateAllQuantities(quantity1, quantity2) {\n\n  };\n\n  updateQuantity (event) {\n    // const { cups } = this.state;\n    const eventInfo = event.target.id.split(\"-\");\n    const name = eventInfo[0];\n    let currentWater = this.state.waterGrams;\n    let newWater;\n    // id for input, update this input.value onClick...\n    // `${name}-amount`\n    //cups as state should be a super precise down to the decimal\n    //only really incrementing cups with increment buttons.\n    // calculate how much cups increases base off 1ml additional water (taking into acoount goldenRatio)\n    // calculate how much cups increases based off 1g additional coffee (taking into account goldenRatio)\n    if (name === \"waterGrams\") {\n      newWater = (eventInfo[1] === \"increment\") ?\n        currentWater + 1 \n        : currentWater - 1;\n    }\n    this.setState({ waterGrams: newWater });\n  }\n\n//no longer a submit button\n\n//   onSubmitCoffee(event) {\n//     const { coffeeGrams, goldenRatio } = this.state;\n//     this.setServings(coffeeGrams, parseFloat(goldenRatio));\n//     event.preventDefault();\n//   }\n\n// //no longer a submit button\n//   onSubmitServings(event) {\n//     const { servings, goldenRatio } = this.state;\n//     this.setIngredients(servings, parseFloat(goldenRatio));\n//     event.preventDefault();\n//   }\n\n//this is not being called right now\n  // setCupss(coffeeGrams, goldenRatio, cupSize = 280) {\n  //   const possibleCups = (coffeeGrams * goldenRatio) / cupSize;\n  //   const roundedPossibleCups = Math.round(possibleCups * 4) / 4;\n\n  //   this.setIngredients(roundedPossibleCups, goldenRatio);\n  // }\n\n//convert waterGrams to oz\n  // waterGramsToCups (waterGrams, cupSize = 280) {\n  //   const cups = Math.round(waterGrams / cupSize);\n  //   return cups;\n  // }\n\n\n\n// //this is not being called right now\n//   setIngredients(cups, goldenRatio, cupSize=280) {   \n//     const waterGrams = Math.round(cups * cupSize);\n//     const coffeeGrams = Math.round(waterGrams / goldenRatio);\n\n//     this.setState({\n//         cups: cups,\n//     });\n//   }\n\n  render() {\n    const { waterGrams, goldenRatio } = this.state;\n    //convert water in oz to grams\n\n    const cupsFromWater = (water, cupSize = 280) => {\n      const possibleCups = water / cupSize;\n      const roundedPossibleCups = Math.round(possibleCups * 4) / 4;\n      return roundedPossibleCups;\n    }\n\n  //use the goldenRatio and water amount to calculate cofee needed in grams;\n    const coffeeGramsFromWater = (water, goldenRatio) => {\n      const coffeeGrams = water / goldenRatio;\n      return Math.round(coffeeGrams);\n    }\n    return (\n\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Brew Ratio</h1>\n        </header>\n\n        <main>\n          <div id=\"adjustables\">\n            <IncrementDecrementSet\n              name=\"cups\"\n              title=\"Brewed Cups\"\n              value={cupsFromWater(waterGrams)}\n              measure=\"x 8oz\"\n              changeQuantity=\n                {this.updateQuantity}\n            />\n            <IncrementDecrementSet\n              name=\"coffeeGrams\"\n              title=\"Ground Coffee\"\n              value={coffeeGramsFromWater(waterGrams, goldenRatio)}\n              measure=\"g\"\n              changeQuantity=\n                {this.updateQuantity}\n            />\n            <IncrementDecrementSet\n              name=\"waterGrams\"\n              title=\"Water\"\n              value={waterGrams}\n              measure=\"mL or g\"\n              changeQuantity=\n                {this.updateQuantity}\n            />\n          </div>\n\n          <div className=\"strengthInput interactions\">\n            <h2>Coffee : Water</h2>\n            <form> \n\n              <div className=\"strength\"> \n                  <InputButton\n                    className = {(goldenRatio === \"18\") ? \"active\" : \"inactive\"} \n                    id=\"light\"\n                    name=\"goldenRatio\"\n                    value=\"18\"\n                    onClick={this.setQuantity}\n                  />\n                <label className=\"strength\" htmlFor=\"light\">light</label>\n              </div>\n\n              <div className=\"strength\">\n                <InputButton\n                  className = {(goldenRatio === \"15.5\") ? \"active\" : \"inactive\"} \n                  id=\"med\"\n                  name=\"goldenRatio\"\n                  value=\"15.5\"\n                  onClick={this.setQuantity}\n                />\n                <label className=\"strength\" htmlFor=\"med\">medium</label>\n              </div>\n\n              <div className=\"strength\">\n                <InputButton\n                   className = {(goldenRatio === \"13\") ? \"active\" : \"inactive\"}\n                  id=\"strong\"\n                  name=\"goldenRatio\"                \n                  value=\"13\"\n                  onClick={this.setQuantity}\n                />\n                <label className=\"strength\" htmlFor=\"strong\">strong</label>\n              </div>\n\n            </form>\n          </div>\n\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}