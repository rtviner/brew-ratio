{"ast":null,"code":"import _slicedToArray from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/src/components/Timer/Timer.js\";\nimport PropTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport Controls from './Controls';\nimport TimerDisplay from './TimerDisplay';\nimport IncrementDecrementButton from '../shared/IncrementDecrementButton';\n\nvar Timer = function Timer() {\n  var DefaultMinutes = 3;\n  var DefaultSeconds = 0;\n\n  var twoDigits = function twoDigits(time) {\n    return time >= 10 ? time : \"0\".concat(time);\n  };\n\n  var countdownView = function countdownView(minutes, seconds) {\n    return \"\".concat(twoDigits(minutes) || '00', \":\").concat(twoDigits(seconds) || '00');\n  };\n\n  var _useState = useState(DefaultMinutes),\n      _useState2 = _slicedToArray(_useState, 2),\n      minutes = _useState2[0],\n      setMinutes = _useState2[1];\n\n  var _useState3 = useState(DefaultSeconds),\n      _useState4 = _slicedToArray(_useState3, 2),\n      seconds = _useState4[0],\n      setSeconds = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      timerOn = _useState6[0],\n      setTimerOn = _useState6[1]; // useEffect(() => {\n  //   const minutes = parseFloat(localStorage.getItem('minutes'))\n  //       || DefaultMinutes;\n  //   const seconds = parseFloat(localStorage.getItem('seconds'))\n  //       || DefaultSeconds;\n  //   setMinutes(minutes);\n  //   setSeconds(seconds);\n  // }, []);\n  //timer play pause functionality works until reset timer button is clicked,\n  //reset timer updates state but then state is update from somewhere else...\n\n\n  useEffect(function () {\n    var tick = null;\n\n    if (timerOn) {\n      var intervalTime = minutes * 60 + seconds;\n      var endTime = new Date().getTime() + intervalTime * 1000 + 500;\n      console.log(\"intervalTime:\", intervalTime);\n      console.log(\"endTime:\", endTime);\n\n      var updateClock = function updateClock() {\n        var msLeft = endTime - new Date().getTime(); // if (msLeft <= 0) {\n        //     // make a ding noise\n        // }\n\n        console.log(\"endTime:\", endTime);\n        console.log(\"msLeft:\", msLeft);\n\n        if (msLeft >= 0) {\n          var currentTime = new Date(msLeft);\n          setMinutes(currentTime.getUTCMinutes());\n          setSeconds(currentTime.getUTCSeconds());\n          tick = setTimeout(updateClock, currentTime.getUTCMilliseconds() + 500);\n        }\n      };\n\n      updateClock();\n    } else if (!timerOn) {\n      clearInterval(tick);\n      console.log(\"tick:\", tick);\n    }\n\n    return function () {\n      return clearInterval(tick);\n    };\n  }, [timerOn, minutes, seconds]);\n\n  var stepUpTime = function stepUpTime() {\n    var currentMinutes = minutes;\n    var currentSeconds = seconds;\n    var newMinutes;\n    var newSeconds;\n\n    if (seconds === 59) {\n      newMinutes = currentMinutes + 1;\n      newSeconds = 0;\n      setMinutes(newMinutes);\n      setSeconds(newSeconds);\n    } else if (minutes < 5) {\n      newSeconds = currentSeconds + 1;\n      setSeconds(newSeconds);\n    }\n  };\n\n  var stepDownTime = function stepDownTime() {\n    var currentMinutes = minutes;\n    var currentSeconds = seconds;\n    var newMinutes;\n    var newSeconds;\n\n    if (seconds === 0 && minutes > 2) {\n      newMinutes = currentMinutes - 1;\n      newSeconds = 59;\n      setMinutes(newMinutes);\n      setSeconds(newSeconds);\n    }\n\n    if (seconds > 0) {\n      newSeconds = currentSeconds - 1;\n      setSeconds(newSeconds);\n    }\n  };\n\n  var resetTimer = function resetTimer() {\n    setMinutes(DefaultMinutes);\n    setSeconds(DefaultSeconds);\n    setTimerOn(false);\n  };\n\n  var playPause = function playPause() {\n    setTimerOn(!timerOn);\n  };\n\n  return React.createElement(\"div\", {\n    id: \"countdown-timer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"increment timer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(IncrementDecrementButton, {\n    id: \"timer\",\n    onClick: stepUpTime,\n    text: \"+\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), React.createElement(IncrementDecrementButton, {\n    id: \"timer\",\n    onClick: stepDownTime,\n    text: \"-\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  })), React.createElement(TimerDisplay, {\n    time: countdownView(minutes, seconds),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }), React.createElement(Controls, {\n    playPauseClick: playPause,\n    resetClick: resetTimer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }));\n};\n\nTimer.propTypes = {\n  stepUpTime: PropTypes.func,\n  stepDownTime: PropTypes.func,\n  countdownView: PropTypes.string,\n  playPause: PropTypes.func,\n  resetTimer: PropTypes.func\n};\nexport default Timer;","map":{"version":3,"sources":["/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/src/components/Timer/Timer.js"],"names":["PropTypes","React","useState","useEffect","Controls","TimerDisplay","IncrementDecrementButton","Timer","DefaultMinutes","DefaultSeconds","twoDigits","time","countdownView","minutes","seconds","setMinutes","setSeconds","timerOn","setTimerOn","tick","intervalTime","endTime","Date","getTime","console","log","updateClock","msLeft","currentTime","getUTCMinutes","getUTCSeconds","setTimeout","getUTCMilliseconds","clearInterval","stepUpTime","currentMinutes","currentSeconds","newMinutes","newSeconds","stepDownTime","resetTimer","playPause","propTypes","func","string"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\n\nimport Controls from './Controls';\nimport TimerDisplay from './TimerDisplay';\nimport IncrementDecrementButton from '../shared/IncrementDecrementButton';\n\nconst Timer = () => {\n  const DefaultMinutes = 3;\n  const DefaultSeconds = 0;\n  let twoDigits = time => (time >= 10 ? time : `0${time}`);\n\n  const countdownView = (minutes, seconds) => `${twoDigits(minutes) || '00'}:${twoDigits(seconds) || '00'}`;\n\n  const [minutes, setMinutes] = useState(DefaultMinutes);\n  const [seconds, setSeconds] = useState(DefaultSeconds);\n  const [timerOn, setTimerOn] = useState(false);\n  \n  // useEffect(() => {\n  //   const minutes = parseFloat(localStorage.getItem('minutes'))\n  //       || DefaultMinutes;\n  //   const seconds = parseFloat(localStorage.getItem('seconds'))\n  //       || DefaultSeconds;\n\n  //   setMinutes(minutes);\n  //   setSeconds(seconds);\n  // }, []);\n\n  //timer play pause functionality works until reset timer button is clicked,\n    //reset timer updates state but then state is update from somewhere else...\n  useEffect(() => {\n    let tick = null;\n    \n    if (timerOn) {\n\n      let intervalTime = (minutes * 60)  + seconds;\n      let endTime = new Date().getTime() + intervalTime * 1000 + 500;\n\n      console.log(\"intervalTime:\", intervalTime);\n      console.log(\"endTime:\", endTime);\n      const updateClock = () => {\n        let msLeft = endTime - new Date().getTime()\n        // if (msLeft <= 0) {\n        //     // make a ding noise\n        // }\n        console.log(\"endTime:\", endTime);\n        console.log(\"msLeft:\", msLeft);\n        if (msLeft >= 0) {\n          let currentTime = new Date(msLeft);\n          setMinutes(currentTime.getUTCMinutes())\n          setSeconds(currentTime.getUTCSeconds())\n          \n          tick = setTimeout(\n            updateClock,\n            currentTime.getUTCMilliseconds() + 500\n          );\n        }\n      }\n      updateClock()\n    } else if (!timerOn) {\n      clearInterval(tick);\n      console.log(\"tick:\", tick);\n    }\n    return () => clearInterval(tick);\n  }, [timerOn, minutes, seconds]);\n\n  const stepUpTime = () => {\n    const currentMinutes = minutes;\n    const currentSeconds = seconds;\n    let newMinutes;\n    let newSeconds;\n    if (seconds === 59) {\n      newMinutes = currentMinutes + 1;\n      newSeconds = 0;\n      setMinutes(newMinutes);\n      setSeconds(newSeconds);\n    }\n    else if (minutes < 5) {\n      newSeconds = currentSeconds + 1;\n      setSeconds(newSeconds);\n    }\n  }\n\n  const stepDownTime = () => {\n    const currentMinutes = minutes;\n    const currentSeconds = seconds;\n    let newMinutes;\n    let newSeconds;\n    if (seconds === 0 && minutes > 2) {\n      newMinutes = currentMinutes - 1;\n      newSeconds = 59;\n      setMinutes(newMinutes);\n      setSeconds(newSeconds);\n    }\n    if (seconds > 0) {\n      newSeconds = currentSeconds - 1;\n      setSeconds(newSeconds);\n    }\n  };\n\n  const resetTimer = () => {\n    setMinutes(DefaultMinutes);\n    setSeconds(DefaultSeconds);\n    setTimerOn(false);\n  }\n\n  const playPause = () => {\n    setTimerOn(!timerOn);\n  }\n\n  return (\n    <div id=\"countdown-timer\">\n      <div className=\"increment timer\">\n        <IncrementDecrementButton \n          id=\"timer\"\n          onClick={stepUpTime}\n          text=\"+\"\n        />\n        <IncrementDecrementButton \n          id=\"timer\"\n          onClick={stepDownTime}\n          text=\"-\"\n        />\n      </div>\n      <TimerDisplay time={countdownView(minutes, seconds)} />\n      <Controls\n        playPauseClick={playPause}\n        resetClick={resetTimer}\n      />\n    </div>\n  );\n};\n\nTimer.propTypes = {\n    stepUpTime: PropTypes.func,\n    stepDownTime: PropTypes.func,\n    countdownView: PropTypes.string,\n    playPause: PropTypes.func,\n    resetTimer: PropTypes.func\n};\n\nexport default Timer;"]},"metadata":{},"sourceType":"module"}