{"ast":null,"code":"import _classCallCheck from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/src/App.js\";\nimport React, { Component } from 'react';\nimport { IncrementDecrementSet } from './increment.js';\nimport { InputButton } from \"./inputButton.js\";\nimport './App.css';\nvar DefaultCups = 2; // const DefaultBrewAmt = 20;\n// const DefaultCoffee = 36;\n// const DefaultWater = 560;\n\nvar DefaultRatio = \"15.5\"; // const waterGramsPerOz = 29.574;\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      goldenRatio: DefaultRatio,\n      cups: DefaultCups,\n      // brewAmount: DefaultBrewAmt,\n      // coffeeGrams: DefaultCoffee,\n      // waterGrams: DefaultWater, \n      error: null\n    };\n    _this.updateQuantity = _this.updateQuantity.bind(_assertThisInitialized(_assertThisInitialized(_this))); // this.waterOzToGrams = this.waterOzToGrams.bind(this);\n    // this.waterGramsToOz = this.waterGramsToOz.bind(this);\n    // this.updateQuantities = this\n    //   .updateQuantities.bind(this);\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"updateAllQuantities\",\n    value: function updateAllQuantities(quantity1, quantity2) {}\n  }, {\n    key: \"updateQuantity\",\n    value: function updateQuantity(event) {\n      var cups = this.state.cups;\n      var eventInfo = event.target.id.split(\"-\");\n      var name = eventInfo[0];\n      var newQuantity; //cups as state should be a super precise down to the decimal\n      //only really incrementing cups with increment buttons.\n\n      if (name === \"cups\") {\n        if (event.target.type === \"number\") {\n          newQuantity = !event.target.value ? 0 : parseFloat(event.target.value);\n        }\n\n        if (event.target.type === \"button\") {\n          if (eventInfo[1] === \"increment\") {\n            newQuantity = currentQuantity + 1;\n          }\n\n          if (eventInfo[1] === \"decrement\" && currentQuantity > 1) {\n            newQuantity = currentQuantity - 1;\n          }\n        }\n      } // console.log(newQuantity);\n\n\n      this.setState({\n        cups: newQuantity\n      });\n    } //no longer a submit button\n    //   onSubmitCoffee(event) {\n    //     const { coffeeGrams, goldenRatio } = this.state;\n    //     this.setServings(coffeeGrams, parseFloat(goldenRatio));\n    //     event.preventDefault();\n    //   }\n    // //no longer a submit button\n    //   onSubmitServings(event) {\n    //     const { servings, goldenRatio } = this.state;\n    //     this.setIngredients(servings, parseFloat(goldenRatio));\n    //     event.preventDefault();\n    //   }\n    //this is not being called right now\n    // setCupss(coffeeGrams, goldenRatio, cupSize = 280) {\n    //   const possibleCups = (coffeeGrams * goldenRatio) / cupSize;\n    //   const roundedPossibleCups = Math.round(possibleCups * 4) / 4;\n    //   this.setIngredients(roundedPossibleCups, goldenRatio);\n    // }\n    //convert waterGrams to oz\n    // waterGramsToCups (waterGrams, cupSize = 280) {\n    //   const cups = Math.round(waterGrams / cupSize);\n    //   return cups;\n    // }\n    // //this is not being called right now\n    //   setIngredients(cups, goldenRatio, cupSize=280) {   \n    //     const waterGrams = Math.round(cups * cupSize);\n    //     const coffeeGrams = Math.round(waterGrams / goldenRatio);\n    //     this.setState({\n    //         cups: cups,\n    //     });\n    //   }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          cups = _this$state.cups,\n          goldenRatio = _this$state.goldenRatio; //convert water in oz to grams\n\n      var waterGramsFromCups = function waterGramsFromCups(cups) {\n        var cupSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 280;\n        var waterGrams = Math.round(cups * cupSize);\n        return waterGrams;\n      }; //use the goldenRatio and water amount to calculate cofee needed in grams;\n\n\n      var coffeeGramsFromCups = function coffeeGramsFromCups(cups, goldenRatio) {\n        var waterGrams = waterGramsFromCups(cups);\n        var coffeeGrams = Math.round(waterGrams / goldenRatio);\n        return coffeeGrams;\n      };\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Brew Ratio\")), React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"adjustables\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(IncrementDecrementSet, {\n        name: \"cups\",\n        title: \"Brewed Cups\",\n        value: cups,\n        measure: \"x 8oz\",\n        setQuantity: this.updateQuantity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(IncrementDecrementSet, {\n        name: \"coffeeGrams\",\n        title: \"Ground Coffee\",\n        value: coffeeGramsFromCups(cups, goldenRatio),\n        measure: \"g\",\n        setQuantity: this.updateQuantity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }), React.createElement(IncrementDecrementSet, {\n        name: \"waterGrams\",\n        title: \"Water\",\n        value: waterGramsFromCups(cups),\n        measure: \"mL or g\",\n        setQuantity: this.updateQuantity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"strengthInput interactions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"Coffee : Water\"), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"strength\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(InputButton, {\n        className: goldenRatio === \"18\" ? \"active\" : \"inactive\",\n        id: \"light\",\n        name: \"goldenRatio\",\n        value: \"18\",\n        onClick: this.setQuantity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        className: \"strength\",\n        htmlFor: \"light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"light\")), React.createElement(\"div\", {\n        className: \"strength\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(InputButton, {\n        className: goldenRatio === \"15.5\" ? \"active\" : \"inactive\",\n        id: \"med\",\n        name: \"goldenRatio\",\n        value: \"15.5\",\n        onClick: this.setQuantity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        className: \"strength\",\n        htmlFor: \"med\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"medium\")), React.createElement(\"div\", {\n        className: \"strength\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(InputButton, {\n        className: goldenRatio === \"13\" ? \"active\" : \"inactive\",\n        id: \"strong\",\n        name: \"goldenRatio\",\n        value: \"13\",\n        onClick: this.setQuantity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        className: \"strength\",\n        htmlFor: \"strong\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"strong\"))))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/beccaviner/Desktop/sites/brew-ratio/brew-ratio/src/App.js"],"names":["React","Component","IncrementDecrementSet","InputButton","DefaultCups","DefaultRatio","App","props","state","goldenRatio","cups","error","updateQuantity","bind","quantity1","quantity2","event","eventInfo","target","id","split","name","newQuantity","type","value","parseFloat","currentQuantity","setState","waterGramsFromCups","cupSize","waterGrams","Math","round","coffeeGramsFromCups","coffeeGrams","setQuantity"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { IncrementDecrementSet } from './increment.js';\nimport { InputButton } from \"./inputButton.js\";\nimport './App.css';\n\nconst DefaultCups = 2;\n// const DefaultBrewAmt = 20;\n// const DefaultCoffee = 36;\n// const DefaultWater = 560;\nconst DefaultRatio = \"15.5\";\n// const waterGramsPerOz = 29.574;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      goldenRatio: DefaultRatio,\n      cups: DefaultCups,\n      // brewAmount: DefaultBrewAmt,\n      // coffeeGrams: DefaultCoffee,\n      // waterGrams: DefaultWater, \n      error: null,\n    };\n\n    this.updateQuantity = this\n      .updateQuantity.bind(this);\n    // this.waterOzToGrams = this.waterOzToGrams.bind(this);\n    // this.waterGramsToOz = this.waterGramsToOz.bind(this);\n    // this.updateQuantities = this\n    //   .updateQuantities.bind(this);\n\n  }\n\n  updateAllQuantities(quantity1, quantity2) {\n\n  };\n\n  updateQuantity (event) {\n    const { cups } = this.state;\n    const eventInfo = event.target.id.split(\"-\");\n    const name = eventInfo[0];\n    let newQuantity;\n    //cups as state should be a super precise down to the decimal\n    //only really incrementing cups with increment buttons.\n    if (name === \"cups\") {\n      if (event.target.type === \"number\") {\n        newQuantity = (!event.target.value) ? 0 : parseFloat(event.target.value);\n      }\n\n      if (event.target.type === \"button\") {\n        if (eventInfo[1] === \"increment\" ) {\n          newQuantity = currentQuantity + 1;\n        }\n        if (eventInfo[1] === \"decrement\" && currentQuantity > 1) {\n          newQuantity = currentQuantity - 1;\n        }\n      }\n      \n    }\n    // console.log(newQuantity);\n    this.setState({cups: newQuantity})\n  }\n\n//no longer a submit button\n\n//   onSubmitCoffee(event) {\n//     const { coffeeGrams, goldenRatio } = this.state;\n//     this.setServings(coffeeGrams, parseFloat(goldenRatio));\n//     event.preventDefault();\n//   }\n\n// //no longer a submit button\n//   onSubmitServings(event) {\n//     const { servings, goldenRatio } = this.state;\n//     this.setIngredients(servings, parseFloat(goldenRatio));\n//     event.preventDefault();\n//   }\n\n//this is not being called right now\n  // setCupss(coffeeGrams, goldenRatio, cupSize = 280) {\n  //   const possibleCups = (coffeeGrams * goldenRatio) / cupSize;\n  //   const roundedPossibleCups = Math.round(possibleCups * 4) / 4;\n\n  //   this.setIngredients(roundedPossibleCups, goldenRatio);\n  // }\n\n//convert waterGrams to oz\n  // waterGramsToCups (waterGrams, cupSize = 280) {\n  //   const cups = Math.round(waterGrams / cupSize);\n  //   return cups;\n  // }\n\n\n\n// //this is not being called right now\n//   setIngredients(cups, goldenRatio, cupSize=280) {   \n//     const waterGrams = Math.round(cups * cupSize);\n//     const coffeeGrams = Math.round(waterGrams / goldenRatio);\n\n//     this.setState({\n//         cups: cups,\n//     });\n//   }\n\n  render() {\n    const { cups, goldenRatio } = this.state;\n    //convert water in oz to grams\n\n    const waterGramsFromCups = (cups, cupSize = 280) => {\n      const waterGrams = Math.round(cups * cupSize);\n      return waterGrams;\n    }\n\n  //use the goldenRatio and water amount to calculate cofee needed in grams;\n    const coffeeGramsFromCups = (cups, goldenRatio) => {\n      const waterGrams = waterGramsFromCups(cups);\n      const coffeeGrams = Math.round(waterGrams / goldenRatio);\n      return coffeeGrams;\n    }\n    return (\n\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Brew Ratio</h1>\n        </header>\n\n        <main>\n          <div id=\"adjustables\">\n            <IncrementDecrementSet\n              name=\"cups\"\n              title=\"Brewed Cups\"\n              value={cups}\n              measure=\"x 8oz\"\n              setQuantity=\n                {this.updateQuantity}\n            />\n            <IncrementDecrementSet\n              name=\"coffeeGrams\"\n              title=\"Ground Coffee\"\n              value={coffeeGramsFromCups(cups, goldenRatio)}\n              measure=\"g\"\n              setQuantity=\n                {this.updateQuantity}\n            />\n            <IncrementDecrementSet\n              name=\"waterGrams\"\n              title=\"Water\"\n              value={waterGramsFromCups(cups)}\n              measure=\"mL or g\"\n              setQuantity=\n                {this.updateQuantity}\n            />\n          </div>\n\n          <div className=\"strengthInput interactions\">\n            <h2>Coffee : Water</h2>\n            <form> \n\n              <div className=\"strength\"> \n                  <InputButton\n                    className = {(goldenRatio === \"18\") ? \"active\" : \"inactive\"} \n                    id=\"light\"\n                    name=\"goldenRatio\"\n                    value=\"18\"\n                    onClick={this.setQuantity}\n                  />\n                <label className=\"strength\" htmlFor=\"light\">light</label>\n              </div>\n\n              <div className=\"strength\">\n                <InputButton\n                  className = {(goldenRatio === \"15.5\") ? \"active\" : \"inactive\"} \n                  id=\"med\"\n                  name=\"goldenRatio\"\n                  value=\"15.5\"\n                  onClick={this.setQuantity}\n                />\n                <label className=\"strength\" htmlFor=\"med\">medium</label>\n              </div>\n\n              <div className=\"strength\">\n                <InputButton\n                   className = {(goldenRatio === \"13\") ? \"active\" : \"inactive\"}\n                  id=\"strong\"\n                  name=\"goldenRatio\"                \n                  value=\"13\"\n                  onClick={this.setQuantity}\n                />\n                <label className=\"strength\" htmlFor=\"strong\">strong</label>\n              </div>\n\n            </form>\n          </div>\n\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}